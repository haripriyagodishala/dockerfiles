FROM almalinux:9
------------------------
Docker Nteworking

In github -> expense-docker folder -> Install-docker.sh -> Take raw file
In superputty server -> curl <web-broeser-link> | sudo bash -> installing docker
after this, exit and login again
git clone, cd to expense-docker/mysql
build, run
docker network ls
netstat -lntp
docker ps
sudo netstat -lntp -> mysql opens the host port not the container port since it is in host n/w

1. host network
2. bridge n/w -> default n/w
3. Overlay n/w -> b/w multiple docker hosts

Containers using host n/w, will not get IP address
It means containers are sharing host IP address
containers open host port

mysql - 3306 - host port
backend - 8080 - host
frontend - 80 - host

Every container should Open unique host port. Containers with same host ports not possible.

After mysql, backend build run
Backend dockerfile db_host="localhost"
build, run
run by giving --name as backend and --network as host
We can not connect containers using names in host network
In bridge network, they connect by using names
docker ps
docker logs backend -> it will show the port number of the container

In frontend nginx.conf file replace backend with localhost in code

build, run
No need to expose ports in frontend also becoz we are not using container ports here

Less security in host networks

Now we connect by bridge network to get more security
In default bridge n/w there are no components to run server with dns names
So it will work on only custom bridge n/w

docker network create expense -> custom bridge n/w
docker network ls
build run mysql, backend, frontend
docker inspect mysql -> Container IP address allocated here

Containers are ephemeral(temporary)
So data stored in databases which runs through containers will delete. It can not persist the data
Once u remove containers, u lose the data. Data is mot persisted by default.
To persist the data we use volumes to database servers
1. Unnamed volumes
2. Named volumes
Mount the storage in host to the container
-v host-path:container-path
Named volumes-----
docker volume create volume-name
docker volume ls
docker inspect volume-name

We can manage named volumes using docker commands

docker run -d -v named-volume-name:link-to-be-mounted(container-path) -p host-port:cont-port nginx

volume-name -> nginx html


















